This file will be updated along with each code commit to provide background information 
about how the code is written and how design decisions are made. 
So hopefully, it will be a good assistant for the interview process.

Development environment:
Windos 10 Pro
VS Professional 2017 v15.9.8
TortoiseGit 2.8.0.0
Git Version 2.21.0

My coding guideline:
1. Using TDD.
2. Follow SOLID principles.
3. For the sake of Continuous Integration, use Trunk Based Development and Short-Lived Feature Branches.
4. Follow YAGNI principle when possible.
5. For non-critical situations prefer contract programming over defensive programming.
(In order to communicate techniques that could be applied in real life projects, 
some parts of the project will be over-engineered deliberately.)

Basic design decisions based on the requirement:
1. Build an ExpenseDataParser object that accepts a text block as input, 
extracts the XML content from the text block and do some post data processing, 
subsequently return an object that includes all the XML content as output.
2. Build a REST API that provides the expense data parsing service via ExpenseDataParser.
3. Using Dependency Injection to ease testing, support cross-team development, and drive the design.
4. Consider Decorator Pattern for the data parser.
5. Consider using Interpreter Pattern, Regex, or Keyword dictionary for the XML data extraction.

Turn the specification document into an ordered requirements/tests list:
ExpenseDataParser:
1. When a text block is passed in, then an object that includes all the XML content is returned.
2. When there is a missing closing XML tag in the text block, then an error is returned.
3. When there is invalid XML in the text block, then an error is returned.
4. When ‘cost_centre’ node is missing, then a ‘cost_centre’ node is added with value ‘UNKNOWN’.
5. When there is no "total" node in the XML, then an error is returned.
6. When 'total' node found, then ‘GST' and ‘total excluding GST’ node is added into the return.

REST API:
Build a REST get API via ExpenseDataParser.

=======================================================================================================

Steps:
1. Decompose the first requirement into sub test cases. Start from a very easy one to get the ball rolling. 
I decided the ExpenseDataParser will have a public method called Parse, it takes a string as input 
and returns XDocument object.

2. Create ExpenseDataParser class and make it passes the first test case. 
Writing the unit test with a variant of BDD template, When[Action], Then[Expectation].

3. Write the second test and make the Parse method returns an XDocument object 
with a root node named ‘SerKo.ExpenseData’.

4. Write the major unit test for XML extraction, and make it fail,
then use Regex to quickly get it working.

5. Thoughts on code refactoring:  
We were considering to use Interpreter, Regex, or Keyword dictionary for the data extraction function.
Regex is well known for having issues with tree structure matching. 
Interpreter pattern could be a reliable solution, but it is also complex and costly. 
Using a keyword dictionary requires a finite set of keywords that could be used to extract data.
For the imaginary project, I will make a few assumptions:
1. Creating a keyword dictionary is not feasible for the business. 
2. There will no XML node with the same name in one text block, and the short XML format, <xxx/>, will not be used.
Based on the above assumptions, we first rule out the keyword dictionary approach. 
Then we found out, Regex is just good enough for this situation. 
Based on contract programming and YAGNI principle.
I decided to stick with the current Regex solution. 
Only resort to other methods, when more complex requirement emerges.

6. Write the closing XML tag checking test. Update the Parse function to return a Result object 
that includes Error:bool, ErrorDetials:string, and ExpenseData:XDocument properties. 
Update all previous tests and make them pass. Write the simplest implementation to pass the current test. 
Refactor the XML tag checking code into a private function called ClosingTagIsMissing.

7. At this point, I want to do some logging to record the failure. Logging usually could be 
added right at the start of the project, but I use this to demonstrate the YAGNI and LRM principles. 
While adding logging, I keep in mind that I decided to use DI and constructor injection when possible.

8. Complete the invalid XML checking test. Simply implement it by catching exceptions around XDocument.Parse. 
Allow all other exceptions thrown (fail-fast system).

9. Added the test case for Cost_centre node, and did some minor refactoring.